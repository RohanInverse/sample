package com.cnbc.marketdata.utils;

import static java.util.Collections.synchronizedList;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileFilter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.Serializable;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.ConcurrentHashMap;

import org.apache.logging.log4j.core.Appender;
import org.apache.logging.log4j.core.Filter;
import org.apache.logging.log4j.core.Layout;
import org.apache.logging.log4j.core.LogEvent;
import org.apache.logging.log4j.core.appender.AbstractAppender;
import org.apache.logging.log4j.core.config.plugins.Plugin;
import org.apache.logging.log4j.core.config.plugins.PluginAttribute;
import org.apache.logging.log4j.core.config.plugins.PluginElement;
import org.apache.logging.log4j.core.config.plugins.PluginFactory;
import org.apache.logging.log4j.core.layout.PatternLayout;

@Plugin(name = "CustomLogAppender", category = "Core", elementType = Appender.ELEMENT_TYPE)
public class CustomLogAppender extends AbstractAppender{
//	private final ConcurrentHashMap<Long, BufferedWriter> tid2file = new ConcurrentHashMap<Long, BufferedWriter>();
	private final ConcurrentHashMap<Long, BufferedOutputStream> tid2file = new ConcurrentHashMap<Long, BufferedOutputStream>();
	private final static String outputDir;
	private final static String outputFile;
	private final static String ext = "_threadlog.log";
	static String userdir = System.getProperty("user.dir");
	static DateFormat df = new SimpleDateFormat("MM_dd_yy_HH_mm_ss");
	DateFormat df2 = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
	static Calendar calobj = Calendar.getInstance();
	String logfilepathString = "./Logs/Execution_" + df.format(calobj.getTime()) + ".log";
	private static String fileSeperator = System.getProperty("file.separator");
	private static String lineSeperator = System.getProperty("line.separator");
	private static String pattern = "%d{yyyy-MM-dd HH:mm:ss} [%tid] %-5p %c{1}:%L - %m%n";
	private static final List<LogEvent> events = synchronizedList(new ArrayList<>());
	static {
		String outdir = userdir + fileSeperator + "Logs" + fileSeperator;
		File testDirectory = new File(outdir);
		if (!testDirectory.exists()) {
			testDirectory.mkdir();
		}
		outputDir = outdir;
		outputFile = outputDir + "Execution_" + df.format(calobj.getTime()) + ".log";
		try {
			if (outputDir != null) {
				Files.deleteIfExists(FileSystems.getDefault().getPath(outputFile));
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	protected CustomLogAppender(String name, Filter filter, Layout layout) {
		super(name, filter, layout);
	}

	@PluginFactory
	public static CustomLogAppender createAppender(@PluginAttribute("name") String name, @PluginElement("Filter") Filter filter, @PluginElement("PatternLayout") Layout layout) {
		return new CustomLogAppender(name, filter, layout);
	}

	@Override
	public Layout<? extends Serializable> getLayout() {
		Layout patternLayout = PatternLayout.createLayout(pattern, null, null, null, null, true, false, null, null);
		return patternLayout;
	}

	@Override
	public void append(LogEvent event) {
		if (outputDir == null)
			return; 
		long tid = Thread.currentThread().getId();

		BufferedOutputStream fw = tid2file.get(tid);
		try {

			if (fw == null) {
				fw = new BufferedOutputStream(new FileOutputStream(getFileNameFromThreadID(tid)));
				tid2file.put(tid, fw);
			}
			final byte[] bytes = getLayout().toByteArray(event);
			fw.write(bytes);
			fw.flush();
		} catch (IOException e) {
			e.printStackTrace();
			throw new RuntimeException(e);
		}
		events.add(event);
	}

	public static List<LogEvent> getEvents() {
		return events;
	}

	public static void mergeLogFiles() {
		try {
			File file = new File(outputDir);
			File[] files = file.listFiles(new FileFilter() {
				@Override
				public boolean accept(File pathname) {
					return pathname.getName().endsWith(ext);
				}
			});
			List<Path> paths = new ArrayList<Path>();
			for (File f : files) {
				Path path = f.toPath();
				paths.add(path);
			}
			Collections.sort(paths);
			Path pathAll = FileSystems.getDefault().getPath(outputFile);
			for (Path path : paths) {
				Files.write(pathAll, Files.readAllBytes(path), StandardOpenOption.APPEND, StandardOpenOption.CREATE);
				Files.write(pathAll, lineSeperator.getBytes(), StandardOpenOption.APPEND, StandardOpenOption.CREATE);
				Files.delete(path);
			}
		} catch (IOException e) {
			e.printStackTrace();
			throw new RuntimeException(e);
		}
	}

	private String getFileNameFromThreadID(long tid) {
		return String.format("%sthread_output_%04d%s", outputDir, tid, ext);
	}

	
	
}
